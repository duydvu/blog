<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Triển khai GPT-J 6B Vietnamese News trên Docker và K8S</title>
    <link href="/2022/12/28/Trien-khai-GPT-J-6B-Vietnamese-News-tren-Docker-va-K8S/"/>
    <url>/2022/12/28/Trien-khai-GPT-J-6B-Vietnamese-News-tren-Docker-va-K8S/</url>
    
    <content type="html"><![CDATA[<p>Thời gian gần đây đang nổi lên 1 con AI tên là ChatGPT có khả năng giao tiếp như người thật, biết làm thơ, viết luận văn, giải toán, dịch tiếng Anh sang tiếng Việt, ngay cả viết và đọc hiểu code. Thậm chí nó có thể “giả lập” máy ảo linux và “chat với 1 ChatGPT khác trong máy ảo đó” (Đọc thêm ở <a href="https://www.engraved.blog/building-a-virtual-machine-inside/">đây</a>). Bản chất bên dưới của hệ thống này là 1 mô hình Generative Pre-trained Transformer 3 (GPT-3) với số lượng tham số khổng lồ (175 tỷ), chỉ riêng việc lưu mô hình này thôi cũng cần đến 800 GB! Ngay cả khi OpenAI công bố mô hình này cho cộng đồng thì cũng không thể tự sử dụng được với kinh phí khiêm tốn.</p><p>May mắn là có một mô hình GPT khác đến từ cộng đồng AI Việt Nam, tên là <a href="https://huggingface.co/VietAI/gpt-j-6B-vietnamese-news">GPT-J 6B Vietnamese News</a>, được train bởi VietAI. Mô hình này chỉ có 6 tỷ tham số, đủ nhỏ để chạy trên những con GPU giá rẻ. Trong bài viết này, mình sẽ hướng dẫn cách triển khai mô hình này lên môi trường Docker và K8S, sử dụng thông qua API để lấy kết quả.</p><p>Link tới Github repo chứa code trong bài viết này: <a href="https://github.com/duydvu/gpt-j-6B-vietnamese-news-api">https://github.com/duydvu/gpt-j-6B-vietnamese-news-api</a></p><p><escape><a id="more"></a></escape></p><h1 id="Load-va-chay-thu-mo-hinh"><a href="#Load-va-chay-thu-mo-hinh" class="headerlink" title="Load và chạy thử mô hình"></a>Load và chạy thử mô hình</h1><p>Trước khi chạy thử mô hình này, bạn cần đảm bảo đủ bộ nhớ GPU để load mô hình lên máy. Yêu cầu tối thiểu là khoảng 17 GB. Nếu bạn có nhiều hơn 1 GPU và tổng bộ nhớ nhiều hơn con số này thì vẫn có thể chạy được. Mình đã thử thành công trên 2 card GTX 1080Ti 12GB.</p><p>Bước đầu tiên là load tokenizer và tham số của mô hình:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> torch<br><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer, AutoModelForCausalLM<br><br><span class="hljs-comment"># Load tokenizer</span><br>tokenizer = AutoTokenizer.from_pretrained(model_path)<br><br><span class="hljs-comment"># Load tham số mô hình</span><br>model = AutoModelForCausalLM.from_pretrained(model_path,<br>                                             torch_dtype=torch.float16,<br>                                             low_cpu_mem_usage=<span class="hljs-literal">True</span>)<br>model.parallelize() <span class="hljs-comment"># Chia nhỏ mô hình và phân bổ lên nhiều GPU để tránh bị lỗi OOM</span><br></code></pre></td></tr></table></figure><p>Trong đoạn code trên, mình thực hiện 2 phương pháp tối ưu:</p><ol><li>Sử dụng kiểu dữ liệu float16 thay vì float32 để giảm dung lượng bộ nhớ trên GPU. Vì float16 tương ứng với 2 byte còn float32 tới 4 byte nên tiết kiệm được 50% dung lượng.</li><li>Vì mô hình này vẫn rất lớn so với dung lượng bộ nhớ của các loại GPU phổ biến, nếu bạn có nhiều GPU thì có thể phân bổ các tham số của mô hình trên nhiều GPU thay vì chỉ chạy trên 1 con. Phương pháp này có tên là <strong>Model Parallel</strong>.</li></ol><p>Sau khi đã xong bước 1, chạy thử mô hình để kiểm tra xem có bị lỗi gì không:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># Convert đoạn text từ dạng string sang dãy số integer </span><br>input_ids = tokenizer.encode(<span class="hljs-string">&quot;Tiềm năng của trí tuệ nhân tạo&quot;</span>, return_tensors=<span class="hljs-string">&#x27;pt&#x27;</span>).to(<span class="hljs-string">&#x27;cuda:0&#x27;</span>)<br><br><span class="hljs-comment"># Chạy mô hình</span><br>outputs = model.generate(<br>  input_ids,<br>  max_length=<span class="hljs-number">256</span>,<br>  do_sample=<span class="hljs-literal">True</span>,<br>  top_k=<span class="hljs-number">50</span>,<br>  top_p=<span class="hljs-number">0.9</span>,<br>  num_return_sequences=<span class="hljs-number">1</span>,<br>)<br><br><span class="hljs-comment"># Decode kết quả của mô hình từ dãy số integer sang dạng string và in ra màn hình</span><br><span class="hljs-keyword">for</span> output <span class="hljs-keyword">in</span> outputs:<br>  <span class="hljs-built_in">print</span>(tokenizer.decode(output, skip_special_tokens=<span class="hljs-literal">True</span>))<br></code></pre></td></tr></table></figure><p>Vì thuật toán sinh văn bản mà mình đang sử dụng là lấy mẫu dựa trên xác suất nên sau mỗi lần chạy, mô hình sẽ cho ra kết quả khác nhau. Kết quả thu được trên máy của mình là:</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs text">Tiềm năng của trí tuệ nhân tạo là rất lớn, nhiều ứng dụng có thể ra đời trong tương lai không xa, và điều đó đòi hỏi sự nỗ lực của cả cộng đồng.<br><br>Một điểm khác cần lưu ý là trí tuệ nhân tạo là một lĩnh vực phát triển hoàn toàn mới và không thể chỉ dựa vào mỗi việc nghiên cứu của các trường, viện mà phải kết hợp với các doanh nghiệp, và phải có sự kết nối mạnh mẽ với các doanh nghiệp.<br><br>Về việc chuẩn bị nhân lực cho cuộc cách mạng công nghiệp lần thứ 4, Phó Thủ tướng lưu ý các trường cần có sự đổi mới về cơ chế, phương pháp, mô hình dạy và học nhằm tạo môi trường tốt nhất cho trí tuệ nhân tạo.<br><br>&quot;Nếu cứ làm theo cách cũ thì các trường sẽ như &quot;rúc thóc&quot; vào bao, nhưng nếu áp dụng phương pháp mới mà các trường chưa có, mới ở giai đoạn đầu mà có quy mô lớn hơn nhiều lần thì sẽ rất khó khăn&quot;, Phó Thủ tướng chia sẻ.<br><br>Phó Thủ tướng Vũ Đức Đam đề nghị Bộ KH&amp;CN tiếp tục có sự phối hợp với các bộ, ngành, trước hết là Bộ KH&amp;CN xây dựng chiến lược, quy hoạch phát triển, thực hiện đề án tăng cường.<br></code></pre></td></tr></table></figure><p>Sau khi chạy thử thành công, mình viết lại đoạn code trên thành 1 class trong file <code>src/predictor.py</code> và đóng gói toàn bộ code bao gồm cả phần API server vào trong thư mục <code>src</code>.</p><h1 id="Tao-Docker-image"><a href="#Tao-Docker-image" class="headerlink" title="Tạo Docker image"></a>Tạo Docker image</h1><p>Để build được Docker, trước hết bạn cần phải tải mô hình về máy theo các bước sau:</p><ol><li>Cài đặt <a href="https://git-lfs.com/">git-lfs</a></li><li>Chạy lệnh <code>git clone https://huggingface.co/VietAI/gpt-j-6B-vietnamese-news</code></li></ol><p>Lệnh clone sẽ tải mô hình về và đặt ở thư mục hiện tại trên terminal.</p><p>Sau khi tải xong, dùng lệnh <code>mv</code> để đưa thư mục vừa clone về vào thư mục của repo API:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">mv</span> ./gpt-j-6B-vietnamese-news ./gpt-j-6B-vietnamese-news-api<br></code></pre></td></tr></table></figure><p>Cuối cùng là dùng lệnh <code>build</code> Docker image:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker build -t gpt-j .<br></code></pre></td></tr></table></figure><p>Tiến hành chạy thử bằng việc tạo 1 container và map tới port 5000 của máy:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker run -it --<span class="hljs-built_in">rm</span> -p 5000:5000 gpt-j<br></code></pre></td></tr></table></figure><p>Gọi thử bằng lệnh <code>curl</code>:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">curl --location --request POST <span class="hljs-string">&#x27;http://localhost:5000/predict&#x27;</span> \<br>  --header <span class="hljs-string">&#x27;Content-Type: application/json&#x27;</span> \<br>  --data-raw <span class="hljs-string">&#x27;&#123;</span><br><span class="hljs-string">    &quot;text&quot;: &quot;Tiềm năng của trí tuệ nhân tạo&quot;,</span><br><span class="hljs-string">    &quot;n_samples&quot;: 1</span><br><span class="hljs-string">  &#125;&#x27;</span><br></code></pre></td></tr></table></figure><h1 id="Trien-khai-len-moi-truong-K8S-voi-Helm-Chart"><a href="#Trien-khai-len-moi-truong-K8S-voi-Helm-Chart" class="headerlink" title="Triển khai lên môi trường K8S với Helm Chart"></a>Triển khai lên môi trường K8S với Helm Chart</h1><h2 id="Mot-chut-phan-tich"><a href="#Mot-chut-phan-tich" class="headerlink" title="Một chút phân tích"></a>Một chút phân tích</h2><p>Trong bài viết này, mình chọn Google Cloud Platform (GCP) là nhà cung cấp dịch vụ cloud để triển khai mô hình lên K8S vì mình thường xuyên dùng GCP trong công việc. Dù vậy, nếu bạn có sử dụng nhà cung cấp khác thì cũng không thành vấn đề, quan trọng là họ có GPU cho K8S là được.</p><p>Sau khi nghiên cứu các mức giá GPU của GCP, mình quyết định chọn Nvidia T4 bởi 2 tiêu chí:</p><ol><li>Mức giá - giá thuê hàng tháng của T4 là gần 180 USD, nếu dùng spot VM thì giá chỉ còn 80 USD, cộng với chi phí của CPU, RAM và disk thì khoảng 90 USD, thấp thứ 2 chỉ sau dòng K80.</li><li>Tốc độ xử lý - Lý do mình không chọn K80 là vì nó không hỗ trợ FP16 (<a href="https://docs.nvidia.com/deeplearning/tensorrt/support-matrix/index.html#hardware-precision-matrix">nguồn tham khảo</a>), giúp giảm bộ nhớ cũng như tăng tốc độ chạy mô hình.</li></ol><p>Với dung lượng 16 GB, cần tới 2 card T4 thì mới có thể chạy được mô hình GPT-J này. Như vậy chi phí hàng tháng nếu duy trì liên tục là 90 x 2=180 USD. Nếu chỉ thỉnh thoảng chạy thì chi phí sẽ còn thấp hơn nữa.</p><h2 id="Bat-dau-trien-khai"><a href="#Bat-dau-trien-khai" class="headerlink" title="Bắt đầu triển khai"></a>Bắt đầu triển khai</h2><p>Helm là một công cụ rất tuyệt vời cho việc đóng gói ứng dụng mà chúng ta vừa tạo để đưa lên K8S. Mình đã tạo Helm Chart và để trong thư mục <code>k8s/chart</code>. Chart này bao gồm 2 thành phần:</p><ol><li>Deployment: Tạo deployment chứa pod chạy container gpt-j.</li><li>Service: Tạo service kết nối tới pod trong deployment ở trên.</li></ol><p>Trong phần deployment có 2 phần quan trọng cần lưu ý, một là:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs YAML"><span class="hljs-attr">strategy:</span><br>  <span class="hljs-attr">rollingUpdate:</span><br>    <span class="hljs-attr">maxSurge:</span> <span class="hljs-number">0</span><br>    <span class="hljs-attr">maxUnavailable:</span> <span class="hljs-number">1</span><br>  <span class="hljs-attr">type:</span> <span class="hljs-string">RollingUpdate</span><br></code></pre></td></tr></table></figure><p>Mặc định trong K8S khi cập nhật deployment thì sẽ tạo thêm 1 pod mới chạy song song với pod cũ, nhưng trong trường hợp này mình chỉ có đủ GPU để chạy cho 1 pod nên K8S sẽ không thể thay thế được pod cũ vì không có GPU để chạy pod mới. Vì vậy mình thay đổi strategy để khi cập nhật deployment thì K8S sẽ xóa pod cũ trước khi tạo pod mới. Như vậy thì sẽ không bị hiện tượng trên, nhưng sẽ bị vấn đề khác là xảy ra downtime trong quá trình deploy.</p><p>Hai là:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs YAML"><span class="hljs-attr">resources:</span><br>  <span class="hljs-attr">requests:</span><br>    <span class="hljs-attr">cpu:</span> <span class="hljs-string">500m</span><br>    <span class="hljs-attr">memory:</span> <span class="hljs-string">8000Mi</span><br>    <span class="hljs-attr">nvidia.com/gpu:</span> <span class="hljs-string">&quot;2&quot;</span><br>  <span class="hljs-attr">limits:</span><br>    <span class="hljs-attr">memory:</span> <span class="hljs-string">16000Mi</span><br>    <span class="hljs-attr">nvidia.com/gpu:</span> <span class="hljs-string">&quot;2&quot;</span><br></code></pre></td></tr></table></figure><p>Có 2 dòng quan trọng là <code>nvidia.com/gpu: &quot;2&quot;</code> dùng để cấp phát tài nguyên GPU cho pod. Bắt buộc phải có 2 dòng này thì pod mới có thể dùng GPU được. Một điểm trừ là hiện tại GCP chỉ cho phép 1 GPU được cấp phát tới 1 pod nên nhiều pod không thể chia sẽ cùng 1 GPU được. Nếu có nhiều mô hình khác cần dùng tới GPU thì tốt nhất bạn nên dùng các giải pháp chạy mô hình tập trung như <a href="https://github.com/triton-inference-server/server">Triton</a> để có thể chạy nhiều mô hình trên cùng 1 GPU.</p><p>Bước cuối cùng là cài đặt Helm Chart này lên K8S thông qua lệnh sau:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">helm install --<span class="hljs-built_in">set</span> namespace=default --<span class="hljs-built_in">set</span> image=gpt-j --<span class="hljs-built_in">set</span> version=latest gpt-j ./k8s/chart<br></code></pre></td></tr></table></figure><p>Như vậy là chúng ta đã thành công trong việc triển khai GPT-J lên K8S rồi đó. Chúc bạn cũng thành công như mình nhé!</p>]]></content>
    
    
    
    <tags>
      
      <tag>Machine Learning</tag>
      
      <tag>Deep Learning</tag>
      
      <tag>Docker</tag>
      
      <tag>GPT-J</tag>
      
      <tag>K8S</tag>
      
      <tag>Natural Language Generation</tag>
      
      <tag>Language Model</tag>
      
      <tag>Artificial Intelligence</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Cấu hình GPU trong Docker</title>
    <link href="/2021/01/10/Cau-hinh-GPU-trong-Docker/"/>
    <url>/2021/01/10/Cau-hinh-GPU-trong-Docker/</url>
    
    <content type="html"><![CDATA[<p>Trong bài <a href="/2021/01/05/Cach-thiet-lap-moi-truong-Docker-cho-server-Jupyter-cua-ban">trước</a>, mình đã trình bày cách thiết lập môi trường Docker để chạy server Jupyter. Với nó, bạn có thể cài đặt bất kỳ package nào mà bạn muốn như scikit-learn, Tensorflow, PyTorch. Nhưng những thư viện này sẽ không thể sử dụng được GPU trong máy bạn như khi cài trực tiếp trên hệ điều hành bởi vì bạn chưa cấu hình GPU cho container của bạn. Trong bài này, mình sẽ hướng dẫn bạn cách để sử dụng được GPU trong Docker.</p><p>Mình giả định rằng máy của bạn đang dùng Nvidia GPU và bạn đã cài driver cần thiết trên hệ điều hành Ubuntu rồi. Nếu bạn chưa cài đặt driver cho GPU thì vào đường link ở <a href="https://www.nvidia.com/Download/index.aspx">đây</a>, chọn tải rồi cài driver trước nhé.</p><p><escape><a id="more"></a></escape></p><h2 id="Cai-dat-nvidia-container-runtime"><a href="#Cai-dat-nvidia-container-runtime" class="headerlink" title="Cài đặt nvidia-container-runtime"></a>Cài đặt nvidia-container-runtime</h2><p>Mở terminal và chạy đoạn lệnh dưới đây:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">curl -s -L https://nvidia.github.io/nvidia-container-runtime/gpgkey | \<br>  sudo apt-key add -<br>distribution=$(. /etc/os-release;<span class="hljs-built_in">echo</span> $ID<span class="hljs-variable">$VERSION_ID</span>)<br>curl -s -L https://nvidia.github.io/nvidia-container-runtime/<span class="hljs-variable">$distribution</span>/nvidia-container-runtime.list | \<br>  sudo <span class="hljs-built_in">tee</span> /etc/apt/sources.list.d/nvidia-container-runtime.list<br>sudo apt-get update<br></code></pre></td></tr></table></figure><p>Sau đó, nhập lệnh sau để cài đặt nvidia-container-runtime:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo apt-get install nvidia-container-runtime<br></code></pre></td></tr></table></figure><p>Khởi động lại Docker server:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo service docker restart<br></code></pre></td></tr></table></figure><p>Thế là xong. Đến bước tiếp theo là khởi động 1 container mới với cấu hình cho phép truy cập GPU.</p><h2 id="Khoi-dong-Docker-container"><a href="#Khoi-dong-Docker-container" class="headerlink" title="Khởi động Docker container"></a>Khởi động Docker container</h2><p>Để sử dụng GPU trong 1 container, bạn phải thêm tham số <code>--gpus</code> trong lệnh chạy <code>docker run</code>. Ví dụ:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker run -it -p 8888:8888 --gpus all jupyter-server<br></code></pre></td></tr></table></figure><p>Tham số <code>--gpus</code> có giá trị là <code>all</code> ở đây nghĩa là bạn cho phép container này truy cập vào toàn bộ GPU mà máy bạn đang có. Hoặc là bạn có thể chỉ định những GPU cụ thể được sử dụng trong container.</p><p>Mỗi GPU trong máy được đánh giá trị index bắt đầu từ 0. Ví dụ nếu bạn có 2 GPU thì chúng sẽ được đánh index lần lượt là 0 và 1. Để xem index của từng GPU và các thông số khác như memory, usage thì có thể dùng lệnh <code>nvidia-smi</code>. Ví dụ như trong hình dưới đây:</p><p><img src="/2021/01/10/Cau-hinh-GPU-trong-Docker/Screenshot-2021-01-10-121331.png" alt="Ví dụ chạy lệnh nvidia-smi"></p><p>Ở cột ngoài cùng bên trái, bạn sẽ thấy index của từng GPU. Ở đây có 2 GPU nên được đánh lần lượt 0 và 1. GPU 0 đang sử dụng 4905 MB / 11178 MB, còn GPU 1 thì đang dùng 11140 MB / 11178 MB. Nếu bạn chỉ muốn cấp cho container sử dụng GPU 0 thì dùng lệnh như sau:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker run -it -p 8888:8888 --gpus device=0 jupyter-server<br></code></pre></td></tr></table></figure><p>Hoặc nếu bạn có nhiều hơn 2 GPU thì bạn có thể chỉ định bất kỳ GPU nào được dùng trong container như sau:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker run -it -p 8888:8888 --gpus device=0,2,4 jupyter-server<br></code></pre></td></tr></table></figure><h2 id="Tong-ket"><a href="#Tong-ket" class="headerlink" title="Tổng kết"></a>Tổng kết</h2><p>Giờ đây bạn có thể cài thư viện Tensorflow GPU hay PyTorch trong server Jupyter là có thể dùng được ngay GPU. Với Docker, bạn có thể tha hồ cài đặt bất kỳ phần mềm nào mà bạn muốn.</p><p>Mình cũng chia sẻ thêm một số package rất hữu ích mà mình hay dùng trong công việc:</p><ul><li><strong>tmux</strong>: cho phép bạn quản lý terminal theo phong cách xịn xò như 1 hacker, bạn có thể chạy 1 chương trình trong terminal và tắt nó đi mà không sợ bị dừng chương trình.</li><li><a href="https://github.com/ohmyzsh/ohmyzsh"><strong>ohmyzsh</strong></a>: terminal đẹp lung linh kèm theo 1 số plugin như git cho phép bạn thao tác trên terminal tiện lợi và thích thú hơn.</li></ul><p>Happy Coding!</p>]]></content>
    
    
    
    <tags>
      
      <tag>Docker</tag>
      
      <tag>Jupyter</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Cách thiết lập môi trường Docker cho server Jupyter của bạn</title>
    <link href="/2021/01/05/Cach-thiet-lap-moi-truong-Docker-cho-server-Jupyter-cua-ban/"/>
    <url>/2021/01/05/Cach-thiet-lap-moi-truong-Docker-cho-server-Jupyter-cua-ban/</url>
    
    <content type="html"><![CDATA[<p>Jupyter Notebook và Jupyter Lab là 2 môi trường tuyệt vời cho data scientist thực hành với dữ liệu của mình. Tuy nhiên, đôi khi việc thực hành với dữ liệu gặp 1 chút khó khăn. Nào là cài đặt Java để chạy VnCoreNLP, cài tensorflow GPU để huấn luyện model, cài cmake để cài CocCoc Tokenizer, quản lý dependency,… Có khi bạn lỡ làm sai gì đó khiến cho máy bạn gặp vấn đề mà không biết giải quyết làm sao, vừa tốn công sức vừa tốn thời gian cho những tác vụ không liên quan. Docker chính là chìa khóa để giái quyết những vấn đề trên. Bài viết này sẽ hướng dẫn bạn cách thiết lập môi trường Docker để chạy server Jupyter của bạn.</p><p><escape><a id="more"></a></escape></p><h2 id="Docker-la-gi"><a href="#Docker-la-gi" class="headerlink" title="Docker là gì?"></a>Docker là gì?</h2><p>Nếu bạn chưa biết về Docker hoặc biết 1 chút và muốn tìm hiểu thêm thì nên đọc phần này, nếu không thì bạn có thể kéo xuống <a href="#Tao-Docker-image">phần tiếp theo</a>.</p><p>Docker là 1 môi trường ảo hóa giống như VirtualBox hay VMware. Nếu bạn đã từng dùng máy ảo để chạy 1 hệ điều hành thì có thể thấy rằng chúng cung cấp cho bạn 1 môi trường độc lập với máy chính, những gì bạn làm trên máy ảo không ảnh hưởng đến máy chính. Nếu bạn lỡ phá gì đó hay dính malware thì chỉ cần reset máy ảo đó đi là xong. Sự tiện lợi này khiến cho máy ảo rất thích hợp cho việc phát triển phần mềm, triển khai phần mềm, test virus,… Nhưng cũng chính sự tiện lợi này khiến cho nó tốn rất nhiều tài nguyên của máy. Vì vậy, việc sử dụng máy ảo tương đối khó khăn.</p><p>Docker ra đời nhằm khắc phục những hạn chế trên của máy ảo. Đối với máy ảo, nó dùng 1 thành phần gọi là hypervisor để mô phỏng phần cứng của nhiều máy trên 1 máy, nhờ đó cho phép nhiều máy ảo chạy trên 1 máy chính duy nhất, mỗi máy ảo có thể chạy hệ điều hành khác nhau. Trong khi đó, Docker tận dụng hệ điều hành của máy chính để chạy các container trên đó, mỗi container là 1 phần mềm được đóng gói chạy hoàn toàn độc lập với nhau. Bạn có thể làm gần như bất cứ điều gì trên container này mà không ảnh hướng đến container khác. Hình dưới đây sẽ giải thích rõ hơn về sự khác nhau giữa 2 kiến trúc này.</p><p><img src="/2021/01/05/Cach-thiet-lap-moi-truong-Docker-cho-server-Jupyter-cua-ban/docker.png" alt="So sánh kiến trúc giữa Docker và máy ảo"></p><p>Nhờ vào việc tận dụng tài nguyên có sẵn trong hệ điều hành của máy chính, Docker tiêu tốn ít RAM và dung lượng đĩa hơn so với máy ảo. Qua đó tạo điều kiện thuận lợi cho các nhà phát triển sử dụng Docker để việc phát triển phần mềm trở nên dễ dàng hơn, tình trạng code chạy ổn trên máy này nhưng bị bug trên máy kia được giảm thiểu vì giờ đây code đều chạy trên cùng 1 môi trường. Triển khai phần mềm cũng dễ dàng hơn, trước đây thì DevOps phải biết về các dependency của phần mềm để cài đặt trước khi triển khai, giờ thì chỉ cần Developer tạo 1 image chứa phần mềm và tất cả dependency rồi đưa nó cho DevOps, tới lượt DevOps thì chỉ cần <code>run</code> nó là xong.</p><p>Đối với Data Scientist, việc sử dụng Docker cũng giúp ích rất nhiều. Ví dụ bạn có 1 tool yêu cầu Python 3.7 để chạy nhưng bạn lại đang dùng Python 3.5 thì bạn không cần phải nâng cấp Python của máy mà chỉ cần chạy tool đó trong 1 container có Python 3.7 là xong. Hoặc là trong quá trình cài đặt các phần mềm trên máy, đôi lúc bạn sẽ gặp trường hợp lỗi do cấu hình sai gì đó, nếu mà bạn không tìm được cách sửa thì sẽ tiêu tốn khá nhiều thời gian. Ngược lại, khi bạn cài trên Docker thì chỉ cần xóa container đang chạy rồi khởi động lại cái khác là xong. Mọi thứ rất nhanh phải không nào!</p><p>Docker còn mang lại nhiều lợi ích hơn trong 1 team R&amp;D có nhiều Data Scientist. Bạn không cần phải quan tâm đến việc cài đặt hay cập nhật package này có ảnh hưởng đến thành viên khác trong team hay không, vì mọi thứ đã được <strong>isolated</strong> trong 1 container. Có thể bạn sẽ nghĩ rằng virtualenv của Python cho phép làm điều tương tự, nhưng Docker cho phép làm nhiều hơn thế không chỉ có mỗi quản lý Python package. Giả sử như bạn muốn dùng Java phiên bản mới hơn để chạy tool này nhưng đồng nghiệp của bạn lại đang dùng phiên bản cũ hơn không tương thích thì sao?</p><p>Tóm lại, Docker là 1 công cụ tuyệt vời đã, đang và sẽ ngày càng phát triển trong tương lai, đóng một vai trò quan trọng trong việc phát triển phần mềm của thế giới. Vì vậy, nếu bạn chưa rành về Docker thì mình khuyên bạn nên bắt đầu tìm hiểu nó để cảm nhận rõ được những lợi ích của nó nhé.</p><p>Nguồn tài liệu để học Docker:</p><ul><li><a href="https://docs.docker.com/get-started/overview/">Docker Documentation</a></li><li><a href="https://www.youtube.com/watch?v=1k8pox8mkxc">Video hướng dẫn về Docker rất bổ ích của anh Phạm Huy Hoàng</a></li></ul><p>Trước khi đi vào phần kế tiếp, bạn hãy chắc rằng mình đã nắm được những kiến thức cơ bản của Docker như image, container là gì rồi hãy bắt đầu nhé.</p><h2 id="Tao-Docker-image"><a href="#Tao-Docker-image" class="headerlink" title="Tạo Docker image"></a>Tạo Docker image</h2><p>OK. Trong phần này mình sẽ hướng dẫn cách tạo 1 image dùng để chạy server Jupyter.</p><p>Trong thư mục trống bất kỳ, tạo 1 file mới và đặt tên là <code>Dockerfile</code>, lưu ý là không được có đuôi extension. Mở file này bằng 1 trình editor và copy nội dung sau vào file:</p><figure class="highlight docker"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs docker"><span class="hljs-comment"># Có thể chọn image khác ở https://hub.docker.com/_/python</span><br><span class="hljs-keyword">FROM</span> python:<span class="hljs-number">3.7</span><br><br><span class="hljs-keyword">RUN</span><span class="language-bash"> pip install jupyterlab</span><br><span class="hljs-keyword">WORKDIR</span><span class="language-bash"> /code</span><br><span class="hljs-keyword">CMD</span><span class="language-bash"> [<span class="hljs-string">&quot;jupyter-lab&quot;</span>, <span class="hljs-string">&quot;--ip&quot;</span>, <span class="hljs-string">&quot;0.0.0.0&quot;</span>, <span class="hljs-string">&quot;--allow-root&quot;</span>]</span><br></code></pre></td></tr></table></figure><p>Sau đó, chạy lệnh trong terminal:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker build -t jupyter-server .<br></code></pre></td></tr></table></figure><p>Lệnh này sẽ build 1 image chứa Python 3.7 và Jupyter trong đó.</p><p>Sau khi build xong image, bây giờ bạn có thể sử dụng nó để chạy server Jupyter rồi. Để chạy server, chỉ cần chạy lệnh:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker run -it -p 8888:8888 jupyter-server<br></code></pre></td></tr></table></figure><p>Bạn sẽ thấy thông báo server Jupyter đã được khởi động kèm theo token. Mở browser truy cập vào địa chỉ <a href="http://localhost:8888/">http://localhost:8888</a> rồi nhập token đó vào, thế là bạn đã chạy được server Jupyter trên Docker rồi.</p><p><strong>Lưu ý</strong>: Tất cả các file bạn tạo trên server Jupyter này đều được nằm trong container, bạn sẽ không tìm thấy thư mục code của bạn trong hệ thống file của máy chính. <strong>Nếu bạn có lỡ xóa container này thì mọi nội dung bạn tạo trong nó cũng bị xóa theo</strong>. Để tránh điều này, bạn nên mount thư mục <code>/code</code> trong container lên 1 thư mục trong hệ thống file của máy chính. Để làm điều vậy, bạn chỉ cần thêm 1 tham số trước khi chạy container:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker run -it -p 8888:8888 -v &lt;path-to-your-directory&gt;:/code jupyter-server<br></code></pre></td></tr></table></figure><p>Thay thế <code>&lt;path-to-your-directory&gt;</code> thành đường dần đến thư mục mà bạn muốn để code ở đó. Tham số vừa thêm vào có tác dụng mount thư mục trên máy chính của bạn lên thư mục <code>/code</code> trong container. Hiểu đơn giản là từ bây giờ 2 thư mục này có thể đồng bộ với nhau, nếu bạn tạo 1 file trong thư mục này thì nó sẽ xuất hiện trong thư mục còn lại. Nếu container bị xóa thì nội dung trong thư mục bạn chọn để mount vào vẫn y như cũ.</p><h2 id="Cai-dat-thu-vien"><a href="#Cai-dat-thu-vien" class="headerlink" title="Cài đặt thư viện"></a>Cài đặt thư viện</h2><p>Bạn có thể cài thêm các thư viện cần thiết vào trong container đang chạy bằng 1 trong 3 cách sau đây</p><h3 id="Cach-1-Lenh-docker-exec"><a href="#Cach-1-Lenh-docker-exec" class="headerlink" title="Cách 1: Lệnh docker exec"></a>Cách 1: Lệnh docker exec</h3><p>Để dùng lệnh này, trước tiên bạn cần phải biết tên hoặc ID của container. Mở 1 terminal mới và nhập lệnh sau:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker ps<br></code></pre></td></tr></table></figure><p>Lệnh này sẽ in ra danh sách những container đang chạy trong Docker server, nội dung tương tự như sau:</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs text">CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS                    NAMES<br>b3e70a2ab109        jupyter-server      &quot;jupyter-lab --ip 0.…&quot;   8 minutes ago       Up 7 minutes        0.0.0.0:8888-&gt;8888/tcp   nifty_liskov<br></code></pre></td></tr></table></figure><p>Cột <code>CONTAINER ID</code> hiện ID của container của bạn, còn cột <code>NAMES</code> hiện tên của container. Mỗi container khi được tạo sẽ được cấp cho 1 ID và tên duy nhất trong số các container đang còn tồn tại trong Docker server. Copy 1 trong 2 field này từ màn hình terminal của bạn và nhập lệnh dưới đây:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker <span class="hljs-built_in">exec</span> -it &lt;paste-here&gt; bash<br></code></pre></td></tr></table></figure><p>Sau khi nhấn Enter, terminal của bạn sẽ trở thành terminal trong container. Giờ bạn có thể cài bất cứ thư viện nào trong đây. Ví dụ như:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">pip install numpy pandas<br></code></pre></td></tr></table></figure><h3 id="Cach-2-Dung-tinh-nang-shell-command-tren-Jupyter"><a href="#Cach-2-Dung-tinh-nang-shell-command-tren-Jupyter" class="headerlink" title="Cách 2: Dùng tính năng shell command trên Jupyter"></a>Cách 2: Dùng tính năng shell command trên Jupyter</h3><p>Jupyter cho phép ta chạy bất cứ lệnh nào trong notebook.</p><p>Để làm vậy, bạn cần phải thêm dấu chấm thang (!) vào trước lệnh shell rồi chạy notebook. Ví dụ:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">!pip install numpy<br></code></pre></td></tr></table></figure><p>Hình dưới đây là kết quả sau khi chạy lệnh trên trong notebook</p><p><img src="/2021/01/05/Cach-thiet-lap-moi-truong-Docker-cho-server-Jupyter-cua-ban/screenshot.png" alt="Chạy lệnh shell command trong notebook"></p><p>Cách này nhanh hơn rất nhiều so với cách 1.</p><h3 id="Cach-3-Dung-terminal-cua-Jupyter-Lab"><a href="#Cach-3-Dung-terminal-cua-Jupyter-Lab" class="headerlink" title="Cách 3: Dùng terminal của Jupyter Lab"></a>Cách 3: Dùng terminal của Jupyter Lab</h3><p>Trên thanh công cụ của Jupyter Lab, chọn <strong>File</strong> → <strong>New</strong> → <strong>Terminal</strong>. Một tab mới được mở ra và bạn có thể nhập lệnh vào terminal để cài thư viện.</p><p>Cách làm này chậm hơn cách thứ 2 nhưng mà phù hợp với những tác vụ như monitor bằng lệnh <code>top</code> hoặc <code>watch</code> hoặc <code>tail</code>.</p><h2 id="Tong-ket"><a href="#Tong-ket" class="headerlink" title="Tổng kết"></a>Tổng kết</h2><p>Như vậy là bạn đã có 1 Docker container chạy server Jupyter để phục vụ cho công việc Data Science. Trong container này, bạn có thể cài đặt bất cứ phần mềm nào mà không sợ ảnh hưởng đến hệ điều hành trên máy bạn. Mỗi khi muốn tắt server, bạn có thể vào terminal dùng để chạy server và nhấn <strong>Ctrl + C</strong> là xong.</p><p>Ngoài việc isolate nội dung thư mục, Docker còn cho phép bạn giới hạn tài nguyên cho container theo ý thích. Bạn có thể giới hạn số CPU mà container được sử dụng, hoặc lượng RAM tối đa được dùng để tránh trường hợp hết RAM gây đứng máy. Tìm hiểu ở <a href="https://docs.docker.com/config/containers/resource_constraints/">đây</a> để xem cách làm.</p><p>Còn 1 vấn đề mà mình chưa giải quyết là làm sao để sử dụng GPU trong Docker, nếu bạn đang làm dự án liên quan đến Deep Learning thì GPU cực kỳ cần thiết để tăng tốc quá trình huấn luyện mô hình. Vì vậy, mình sẽ giải quyết vần đề này trong bài viết theo.</p><p>Happy Coding!</p>]]></content>
    
    
    
    <tags>
      
      <tag>Docker</tag>
      
      <tag>Jupyter Notebook</tag>
      
      <tag>Jupyter Lab</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Làm quen với Kafka: Phần 1 - Chat với nhau trên console</title>
    <link href="/2021/01/01/Lam-quen-voi-Kafka-Phan-1-Chat-voi-nhau-tren-console/"/>
    <url>/2021/01/01/Lam-quen-voi-Kafka-Phan-1-Chat-voi-nhau-tren-console/</url>
    
    <content type="html"><![CDATA[<p>Trong 1 hệ thống theo kiến trúc Microservice, để xử lý 1 khối lượng dữ liệu lớn với sự tác động của nhiều service khác nhau, ta phải có cơ chế để các service này giao tiếp với nhau một cách hiệu quả, Kafka được sinh ra để làm nhiệm vụ đó. Trong phần đầu tiên của series “Làm quen với Kafka”, mình sẽ viết 1 ứng dụng Python dùng để chat với nhau trên màn hình console để hiểu được những tính năng cơ bản của Kafka.</p><p>Lưu ý đây chỉ là 1 ứng dụng làm cho vui để làm quen với Kafka thôi chứ không nên đưa vào thực tế nhé.</p><p><escape><a id="more"></a></escape></p><h2 id="Truoc-het-Kafka-la-gi"><a href="#Truoc-het-Kafka-la-gi" class="headerlink" title="Trước hết, Kafka là gì?"></a>Trước hết, Kafka là gì?</h2><p>Kafka là 1 nền tảng event streaming rất phổ biến hiện nay được phát triển bởi tổ chức Apache và là một phần mềm mã nguồn mở. Event streaming ở đây có nghĩa là việc lấy dữ liệu theo thời gian thực từ những nguồn như là cơ sở dữ liệu, cảm biến, thiết bị di động, dịch vụ đám mây và ứng dụng dưới dạng những luồng sự kiện; lưu những sự kiện này để sau đó có thể lấy lên lại và xử lý.</p><h3 id="Nghe-phuc-tap-qua-Tim-1-vi-du-cho-de-hieu-nao"><a href="#Nghe-phuc-tap-qua-Tim-1-vi-du-cho-de-hieu-nao" class="headerlink" title="Nghe phức tạp quá. Tìm 1 ví dụ cho dễ hiểu nào!"></a>Nghe phức tạp quá. Tìm 1 ví dụ cho dễ hiểu nào!</h3><p>Tưởng tượng bạn đang xem kênh Discovery trên TV của bạn. Những hình ảnh và âm thanh mà bạn thấy và nghe được đều được phát đi từ đài truyền hình của kênh này. Ở đây, đài truyền hình của kênh Discovery đóng vai trò là <strong>publisher</strong>, còn bạn - người xem là <strong>subscriber</strong> và kênh Discovery chính là <strong>topic</strong>.</p><p>Publisher có nhiệm vụ là phát đi thông tin vào 1 topic (kênh), thông tin trong trường hợp này là dữ liệu ở dạng hình ảnh và âm thanh. Subscriber có thể đăng ký để lắng nghe trên 1 topic (chọn kênh để xem) và nhận được thông tin mà publisher phát đi. Subscriber cũng có thể lắng nghe trên nhiều topic (xem nhiều kênh trên nhiều TV, nếu bạn giàu và rảnh :D).</p><p>Đối với publisher, việc ai nhận được thông tin không quan trọng, miễn là cứ có thông tin thì nó sẽ phát đi vào 1 hoặc nhiều topic cụ thể. Còn đối với subscriber, publisher nào phát không quan trọng, miễn là topic đó có thông tin thì cứ lấy ra mà xử lý.</p><h2 id="Viet-ung-dung-chat-tren-console"><a href="#Viet-ung-dung-chat-tren-console" class="headerlink" title="Viết ứng dụng chat trên console"></a>Viết ứng dụng chat trên console</h2><p>Kafka hoạt động theo cơ chế client-server, trong đó, server là 1 process chạy trên 1 máy tính và client có thể kết nối đến nó giống như cách bạn kết nối đến database, sử dụng địa chỉ IP và port cùng với username và password nếu có. Client có thể là publisher, consumer hoặc là admin.</p><p>Việc đầu tiên bạn cần phải làm đó là khởi động Kafka server trên 1 chiếc máy tính.</p><h3 id="Khoi-dong-Kafka-server"><a href="#Khoi-dong-Kafka-server" class="headerlink" title="Khởi động Kafka server"></a>Khởi động Kafka server</h3><ol><li><strong>Bước 1</strong>: Mở terminal lên vào nhập dòng lệnh sau để tải Kafka:<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> ~/Downloads<br>wget https://downloads.apache.org/kafka/2.7.0/kafka_2.13-2.7.0.tgz<br></code></pre></td></tr></table></figure></li><li><strong>Bước 2</strong>: Giải nén file vừa tải về:<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">tar -xzf kafka_2.13-2.7.0.tgz<br><span class="hljs-built_in">cd</span> kafka_2.13-2.7.0<br></code></pre></td></tr></table></figure></li><li><strong>Bước 3</strong>: Khởi động ZooKeeper service:<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">bin/zookeeper-server-start.sh config/zookeeper.properties<br></code></pre></td></tr></table></figure></li><li><strong>Bước 4</strong>: Mở 1 terminal mới và nhập dòng lệnh sau đây để bắt đầu chạy Kafka server:<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">bin/kafka-server-start.sh config/server.properties<br></code></pre></td></tr></table></figure></li></ol><h3 id="Co-che-hoat-dong"><a href="#Co-che-hoat-dong" class="headerlink" title="Cơ chế hoạt động"></a>Cơ chế hoạt động</h3><p>Trước khi bắt tay vào viết ứng dụng này, mình sẽ nói 1 chút về cách nó hoạt động như sau:</p><ul><li>Mỗi user khi được tạo sẽ được cấp cho 1 định danh duy nhất, ở đây mình dùng tên của user cho đơn giản. Mỗi user cũng sẽ được cấp 1 topic duy nhất mang tên của chính user đó. Ví dụ: user có tên là user1 sẽ được cấp cho topic cũng tên là user1.</li><li>Mỗi user luôn subscribe vào topic của chính họ, và publish vào topic của các user khác.</li><li>Giả sử user A và user B đang chat với nhau, user A muốn gửi tin nhắn cho B thì sẽ publish nội dung tin nhắn vào topic B, sau đó user B đang subscribe trên topic của mình sẽ nhận được tin nhắn từ A, quá trình nhắn tin từ B tới A cũng diễn ra tương tụ.</li></ul><p><img src="/2021/01/01/Lam-quen-voi-Kafka-Phan-1-Chat-voi-nhau-tren-console/kafka-message.svg" alt="Minh họa cách thức giao tiếp giữa 2 user A và B"></p><h3 id="Code-nao"><a href="#Code-nao" class="headerlink" title="Code nào"></a>Code nào</h3><p>Để có thể giao tiếp được với Kafka server, bạn cần dùng thư viện kafka-python. Sử dụng pip để cài đặt thư viện này:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">pip install kafka-python<br></code></pre></td></tr></table></figure><p>Bạn có thể đọc document của thư viện này tại <a href="https://kafka-python.readthedocs.io/en/master/usage.html">đây</a>.</p><p>Trước tiên, mình thử publish vào 1 topic bằng đoạn code sau:</p><figure class="highlight python"><figcaption><span>publisher.py</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> kafka <span class="hljs-keyword">import</span> KafkaProducer<br><br>BOOTSTRAP_SERVERS = [<span class="hljs-string">&#x27;localhost:9092&#x27;</span>]<br>producer = KafkaProducer(bootstrap_servers=BOOTSTRAP_SERVERS,<br>                         value_serializer=<span class="hljs-keyword">lambda</span> value: <span class="hljs-built_in">bytes</span>(value, encoding=<span class="hljs-string">&#x27;utf-8&#x27;</span>))<br><br>username1 = <span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;What is your name? &#x27;</span>)<br>username2 = <span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;Who do want connect? &#x27;</span>)<br><br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>    value = <span class="hljs-built_in">input</span>()<br>    producer.send(username2, value=value)<br>    producer.flush()<br></code></pre></td></tr></table></figure><p>Đoạn code này sẽ hỏi tên của bạn và tên của user mà bạn muốn nhắn tin, sau đó nó bắt đầu 1 vòng lặp forever để chờ bạn nhập tin nhắn và gửi tin nhắn đó đến topic của user kia.</p><p><code>BOOTSTRAP_SERVERS</code> chứa thông tin để kết nối đến server Kafka mà mình vừa khởi động ở trên, vì mình chạy Kafka trên máy của mình nên địa chỉ IP của server Kafka là localhost và port mặc định là 9092.</p><p>Một message trong Kafka có 2 trường: <code>key</code> và <code>value</code>. Bạn có thể truyền bất cứ dữ liệu nào vào trong 2 trường này. Ở đây mình chỉ cần gửi nội dung tin nhắn nên dùng trường <code>value</code> là đủ.</p><p>Dữ liệu trong 1 message phải có dạng <code>byte</code>. Vậy nên trước khi gửi mình phải chuyển tin nhắn từ dạng <code>string</code> sang <code>byte</code> bằng cách truyền tham số <code>value_serializer</code> cho 1 hàm lambda.</p><p>Test script này bằng lệnh trong terminal:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">python publisher.py<br></code></pre></td></tr></table></figure><p><img src="/2021/01/01/Lam-quen-voi-Kafka-Phan-1-Chat-voi-nhau-tren-console/Screenshot-2021-01-01-160825.png" alt="Chạy thử script chat.py với tên là user1 và user2"></p><p>Vì mình mới chỉ chạy ở bên phía user1 nên không có bất cứ phản hồi nào từ user2. Giờ mình sẽ viết code để user2 lắng nghe tin nhắn từ user1:</p><figure class="highlight python"><figcaption><span>subscriber.py</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> kafka <span class="hljs-keyword">import</span> KafkaConsumer<br><br>BOOTSTRAP_SERVERS = [<span class="hljs-string">&#x27;localhost:9092&#x27;</span>]<br>username2 = <span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;What is your name? &#x27;</span>)<br><br>consumer = KafkaConsumer(username2, auto_offset_reset=<span class="hljs-string">&#x27;latest&#x27;</span>,<br>                         bootstrap_servers=BOOTSTRAP_SERVERS,<br>                         value_deserializer=<span class="hljs-keyword">lambda</span> value: value.decode(<span class="hljs-string">&#x27;utf-8&#x27;</span>))<br><br><span class="hljs-keyword">for</span> msg <span class="hljs-keyword">in</span> consumer:<br>    <span class="hljs-built_in">print</span>(msg.value)<br></code></pre></td></tr></table></figure><p>Đoạn code trên khởi tạo 1 instance <code>KafkaConsumer</code> để subscribe vào topic của user2 và bắt đầu 1 vòng lặp for để lắng nghe trên topic này. Vòng lặp for này sẽ chờ message từ topic trong thời gian vô hạn và không bao giờ dừng lại trừ khi bạn dừng chương trình.</p><p>Tham số <code>value_deserializer</code> là 1 hàm được dùng khi consumer nhận được message từ topic để chuyển trường <code>value</code> của message từ dạng <code>byte</code> trở về dạng ban đầu của nó, trong trường hợp này là <code>string</code>.</p><p>Để chạy script này, mở một tab terminal mới và chạy lệnh:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">python subscriber.py<br></code></pre></td></tr></table></figure><p>Nhập tên user2 để bắt đầu lắng nghe.</p><p>Quay lại tab đang chạy publisher, thử nhập 1 message bất kỳ và quay lại tab đang chạy subscriber. Bạn sẽ thấy message mà mình vừa nhập hiện trên terminal của subscriber.</p><p><img src="/2021/01/01/Lam-quen-voi-Kafka-Phan-1-Chat-voi-nhau-tren-console/Screenshot-2021-01-01-161638.png" alt="Chạy thử script chat.py với tên là user1 và user2"></p><p>Như vậy là chúng ta đã thiết lập được giao tiếp 1 chiều giữa 2 user. Tiếp theo, mình sẽ làm cho mỗi user vừa publish vừa subscribe vào Kafka để có thể vừa gửi và nhập tin nhắn.</p><p>Như bạn thấy trong 2 đoạn code trên, cả 2 đều chứa 1 vòng lặp vô hạn. Điều này có nghĩa là khi user đang gửi tin nhắn thì không thể nhận tin nhắn và ngược lại, vì bản chất của 2 đoạn code trên là blocking - chương trình sẽ chờ trong vô hạn để hoàn thành 1 tác vụ rồi mới chuyển sang tác vụ kế tiếp.</p><p>Để giải quyết vấn đề này, mình sẽ sử dụng thread để tạo 1 thread chạy song song với thread chính. Thread chính có nhiệm vụ là gửi tin nhắn cho đối phương còn thread được tạo có nhiệm vụ nhận tin nhắn từ đối phương.</p><p>Trong Python, để làm việc với thread, mình sử dụng thư viện threading có sẵn. Cách sử dụng khá đơn giản, chỉ cần khởi tạo 1 instance <code>Thread</code> với 2 tham số: <code>target</code> là hàm sẽ chạy trong thread mới; và <code>args</code> là tham số truyền vào hàm <code>target</code>. Sau đó gọi method <code>start</code>. Ví dụ:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">thread = threading.Thread(target=foo, args=())<br>thread.start()<br></code></pre></td></tr></table></figure><p>Vậy trước khi bắt đầu vòng lặp while trong publisher, mình chỉ cần tạo 1 thread mới chạy hàm của subscriber là xong. Dưới đây là đoạn code hoàn chỉnh của chương trình:</p><figure class="highlight python"><figcaption><span>chat.py</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> threading<br><br><span class="hljs-keyword">from</span> kafka <span class="hljs-keyword">import</span> KafkaConsumer, KafkaProducer<br><br>BOOTSTRAP_SERVERS = [<span class="hljs-string">&#x27;localhost:9092&#x27;</span>]<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">subscribe</span>(<span class="hljs-params">topic</span>):<br>    consumer = KafkaConsumer(topic, auto_offset_reset=<span class="hljs-string">&#x27;latest&#x27;</span>,<br>                             bootstrap_servers=BOOTSTRAP_SERVERS,<br>                             value_deserializer=<span class="hljs-keyword">lambda</span> value: value.decode(<span class="hljs-string">&#x27;utf-8&#x27;</span>))<br>    <span class="hljs-keyword">for</span> msg <span class="hljs-keyword">in</span> consumer:<br>        <span class="hljs-built_in">print</span>(msg.value)<br><br>username1 = <span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;What is your name? &#x27;</span>)<br>username2 = <span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;Who do want connect? &#x27;</span>)<br><br>consumer_thread = threading.Thread(target=subscribe, args=(username2,))<br>consumer_thread.start()<br><br>producer = KafkaProducer(bootstrap_servers=BOOTSTRAP_SERVERS,<br>                         value_serializer=<span class="hljs-keyword">lambda</span> value: <span class="hljs-built_in">bytes</span>(value, encoding=<span class="hljs-string">&#x27;utf-8&#x27;</span>))<br><br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>    key = username1<br>    value = <span class="hljs-built_in">input</span>()<br>    producer.send(username1, value=value)<br>    producer.flush()<br></code></pre></td></tr></table></figure><p>Bạn thử mở 2 tab terminal, cho mỗi terminal chạy script này. Tab 1 nhập lần lượt user1 và user2, tab 2 nhập ngược lại user2 và user1.</p><p>Khi bạn nhập 1 tin nhắn ở tab 1 và nhấn Enter thì tin nhắn đó sẽ được hiện trên tab 2, điều tương tự cũng diễn ra khi bạn nhập vào tab 2.</p><p>Bạn có thể xem code đầy đủ của bài viết này ở <a href="https://github.com/duydvu/kafka-tutorial">đây</a>.</p><p>Như vậy là chúng ta đã hoàn thành xong 1 ứng dụng đơn giản để chat trên console bằng Python và Kafka. Mặc dù vậy, nó vần còn thiếu nhiều tính năng quan trọng như:</p><ul><li>Chỉ cho 2 user nhắn tin với nhau trong 1 phiên riêng biệt. Hiện tại, nếu có nhiều hơn 2 user thì sẽ có trường hợp 1 user cùng nhắn tin với 2 user khác.</li><li>Chỉ cho phép user này nhắn tin với user kia khi được họ cho phép.</li></ul><p>Mình sẽ thực hiện những tính năng này trong phần 2 của series.</p><p>Happy Coding!</p>]]></content>
    
    
    
    <tags>
      
      <tag>Coding</tag>
      
      <tag>Kafka</tag>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Cấu hình VS Code để lập trình trên server bằng Remote - SSH</title>
    <link href="/2020/12/26/Cau-hinh-VS-Code-de-code-tren-server/"/>
    <url>/2020/12/26/Cau-hinh-VS-Code-de-code-tren-server/</url>
    
    <content type="html"><![CDATA[<p>Trong bài viết này, mình sẽ hướng dẫn cho các bạn cách thiết lập môi trường lập trình trên server hơn thông qua extension Remote - SSH của VS Code.</p><p><escape><a id="more"></a></escape></p><p>Trước khi bắt đầu, mình sẽ trả lời cho câu hỏi:</p><h2 id="Tai-sao-phai-lap-trinh-tren-server"><a href="#Tai-sao-phai-lap-trinh-tren-server" class="headerlink" title="Tại sao phải lập trình trên server?"></a>Tại sao phải lập trình trên server?</h2><p>Đối với đa số lập trình viên, 1 chiếc laptop hoặc PC là đủ để phục vụ cho công việc của họ. Tuy nhiên, đối với Data Scientist thì đôi khi làm việc trên 1 thiết bị là chưa đủ. Bạn cần phải làm việc trên máy tính có cấu hình mạnh, bộ nhớ lớn để có thể load dữ liệu và huấn luyện mô hình, đặc biệt là các mô hình Deep Learning yêu cầu phải có 1 hoặc nhiều GPU và thời gian huấn luyện có khi lên tới hàng tuần. Những chiếc máy tính mạnh mẽ như vậy thường sẽ không vừa vặn với 1 chiếc laptop hoặc PC nên nếu làm việc trực tiếp thì sẽ khá khó khăn. Vì vậy, việc lập trình trên server sẽ giúp ích rất nhiều, ví dụ như:</p><ul><li>Bạn có thể huấn luyện mô hình mà vẫn có thể tắt laptop mang đi nơi khác.</li><li>Bạn có thể ra quán coffee với chiếc máy tính mỏng nhẹ mà vẫn làm việc được trên chiếc máy tính khủng.</li><li>Bạn có thể chia sẻ máy với đồng nghiệp để cùng tận dụng tài nguyên của máy.</li></ul><p>Hơn nữa, các dịch vụ điện toán đám mây như là AWS, GCP cung cấp dịch vụ tính toán giúp cho chúng ta có thể làm việc trên những chiếc máy tính mạnh mà không cần phải bỏ 1 số tiền lớn để mua hoặc thuê về, điều này cũng khiến cho việc lập trình trên server ngày càng trở nên phổ biến.</p><p>Có nhiều cách khác nhau để có thể lập trình được trên server, cách nhanh nhất là bật 1 trình soạn thảo văn bản như Vim hoặc Nano rồi bắt đầu code. Tuy nhiên, những trình soạn thảo này không cung cấp sẵn những tính năng hữu ích của 1 IDE như là syntax highlighting, autocompletion, debugger. Vim là 1 trình soạn thảo rất tuyệt vời vì nó cho phép gắn thêm plugin vào để thêm tính năng, nó cho phép bạn biến nó thành 1 IDE thực thụ thông qua việc cài đặt những plugin được cung cấp bởi rất nhiều lập trình viên khác. Tùy vào sở thích mà bạn có thể chọn Vim là công cụ chính cho việc lập trình trên server, mặc dù việc thao tác trên Vim khá phức tạp nhưng khi bạn đã quen với việc sử dụng nó rồi thì bạn sẽ thấy được sự mạnh mẽ và hiệu quả mà nó đem lại. Mình cũng hay sử dụng Vim cho những tác vụ edit đơn giản trên server vì nó rất nhanh và tiện lợi. Tạm gác Vim qua một bên, trong bài này mình sẽ chỉ tập trung vào cách cấu hình để bạn có thể lập trình trên server thông qua trình soạn thảo VS Code nổi tiếng của Microsoft (nếu bạn đã từng dùng Visual Studio rồi thì nên tránh nhầm lẫn nhé vì đây là 2 phần mềm khác nhau, Visual Studio là 1 IDE còn VS Code chỉ là 1 trình soạn thảo văn bản mà thôi!).</p><p>Bắt đầu nào!</p><h2 id="Cai-dat-extension-Remote-SSH"><a href="#Cai-dat-extension-Remote-SSH" class="headerlink" title="Cài đặt extension Remote - SSH"></a>Cài đặt extension Remote - SSH</h2><p>Mình giả định rằng bạn đã cài đặt sẵn VS Code trong máy rồi nên mình sẽ chỉ hướng dẫn sau khi bạn đã bật VS Code lên nhé.</p><p>Để cài đặt extension trên VS Code, bạn hãy nhấn vào biểu tượng <strong>Extensions</strong> ở thanh công cụ bên trái, sau đó, trên thanh tìm kiếm gõ cụm từ <em>“Remote - SSH”</em>.</p><p>Extension mà ta cần tìm sẽ xuất hiện trong kết quả tìm kiếm, nhấn vào đó rồi nhấn nút <strong>Install</strong> để bắt đầu quá trình cài đặt. Sau khi cài đặt xong, khởi động lại VS Code để load extension lên.</p><p><img src="/2020/12/26/Cau-hinh-VS-Code-de-code-tren-server/Screenshot-2020-12-26-120808.png" alt="Giao diện VS Code sau khi hoàn tất cài đặt Remote - SSH"></p><p>Tiếp theo, mình sẽ hướng dẫn cách cấu hình môi trường lập trình trên server.</p><h2 id="Cau-hinh-moi-truong-lap-trinh-tren-server"><a href="#Cau-hinh-moi-truong-lap-trinh-tren-server" class="headerlink" title="Cấu hình môi trường lập trình trên server"></a>Cấu hình môi trường lập trình trên server</h2><h3 id="Buoc-1-Tao-SSH-key"><a href="#Buoc-1-Tao-SSH-key" class="headerlink" title="Bước 1: Tạo SSH key"></a>Bước 1: Tạo SSH key</h3><p>Trước khi kết nối đến server thông qua VS Code, bạn cần phải tạo 1 SSH key để xác thực quyền kết nối của máy bạn với server mà không cần dùng mật khẩu.<br>Nếu bạn đã cấu hình SSH server bằng SSH key rồi thì hãy đến với <a href="#Buoc-3-Thiet-lap-moi-truong-SSH-tren-VS-Code">bước 3</a>.</p><p>Mở 1 terminal mới và nhập lệnh sau:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ssh-keygen -t rsa -b 4096 -f ~/.ssh/id_rsa<br></code></pre></td></tr></table></figure><p>Câu lệnh trên sẽ trả về kết quả như dưới đây:</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs text">Generating public/private rsa key pair.<br>Enter passphrase (empty for no passphrase):<br></code></pre></td></tr></table></figure><p>Nhấn Enter 2 lần để hoàn tất việc tạo SSH key trên máy tính của bạn, key này được lưu tại <code>~/.ssh/id_rsa</code>.</p><h3 id="Buoc-2-Them-SSH-key-vao-danh-sach-authorized-keys-cua-server"><a href="#Buoc-2-Them-SSH-key-vao-danh-sach-authorized-keys-cua-server" class="headerlink" title="Bước 2: Thêm SSH key vào danh sách authorized keys của server"></a>Bước 2: Thêm SSH key vào danh sách authorized keys của server</h3><p>Tiếp theo, bạn cần phải SSH vào server để thêm SSH key mà bạn vừa tạo vào danh sách authorized keys của server. Bước này dùng để xác thực quyền truy cập vào server cho máy tính của bạn.</p><p>Đầu tiên, bạn cần copy public key sử dụng lệnh dưới đây:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cat</span> ~/.ssh/id_rsa.pub<br></code></pre></td></tr></table></figure><p>Copy toàn bộ nội dung trả về của lệnh này.</p><p>Tiếp theo, kết nối SSH vào server bằng lệnh sau:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ssh &lt;username&gt;@&lt;ip-address&gt;<br></code></pre></td></tr></table></figure><p>Thay <code>username</code> và <code>ip-address</code> thành giá trị tương ứng mà bạn có. Nhập mật khẩu để xác thực.</p><p>Sau đó, chèn nội dung của public key vào cuối file <code>~/.ssh/authorized_keys</code> bằng lệnh sau:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;&lt;paste-your-public-key-content-here&gt;&quot;</span> &gt;&gt; ~/.ssh/authorized_keys<br></code></pre></td></tr></table></figure><p>Thay <code>paste-your-public-key-content-here</code> bằng nội dung của public key mà bạn vừa copy.</p><p>Như vậy là bạn đã hoàn tất việc xác thực SSH key với server, trong những lần ssh sau, bạn không cần phải cung cấp mật khẩu nữa giúp cho việc ssh vào server trở nên thuận tiện hơn.</p><p><strong>Lưu ý</strong>: Nếu ở trong bước 1, bạn sử dụng tên khác để tạo SSH key như <code>id_abc</code> thì bạn cần phải làm thêm 1 bước là thay đổi cấu hình SSH để nó biết được cần phải dùng key nào khi kết nối đến server của bạn.</p><p>Trong file <code>~/.ssh/config</code>, bạn cần thêm đoạn dưới đây vào cuối file:</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs text"># Chỉ thêm khi file key của bạn khác với mặc định (id_rsa, id_dsa, id_ecdsa, id_ed25519)<br>Host &lt;ip-address&gt;<br>  HostName &lt;ip-address&gt;<br>  User &lt;username&gt;<br>  Port 22<br>  IdentityFile ~/.ssh/id_abc<br></code></pre></td></tr></table></figure><h3 id="Buoc-3-Thiet-lap-moi-truong-SSH-tren-VS-Code"><a href="#Buoc-3-Thiet-lap-moi-truong-SSH-tren-VS-Code" class="headerlink" title="Bước 3: Thiết lập môi trường SSH trên VS Code"></a>Bước 3: Thiết lập môi trường SSH trên VS Code</h3><p>Sau khi đã có thể kết nối đến server thông qua SSH key, bạn hãy mở VS Code và làm theo các bước sau đây:</p><ol><li>Nhấn tổ hợp phím <strong>Ctrl + Shift + P</strong> để mở khung <strong>Command Palette</strong>.</li><li>Nhập <em>“Remote-SSH: Add New SSH Host”</em> rồi nhấn <strong>Enter</strong>.</li><li>Nhập câu lệnh SSH mà bạn sử dụng để SSH đến server: <code>ssh &lt;username&gt;@&lt;ip-address&gt;</code></li><li>Nhập đường dẫn đến file config: <code>~/.ssh/config</code></li></ol><p>VS Code sẽ hiện thống báo rằng server đã được thêm vào. Giờ bạn chọn biểu tượng Remote Explorer ở thanh công cụ bên trái, bạn sẽ thấy địa chỉ ip của server vừa thêm vào. Từ bây giờ, bạn có thể mở 1 folder bất kỳ trên server bằng cách nhấn nút <strong>Connect to Host in New Window</strong> ở kế bên địa chỉ ip của server.</p><p>Như vậy là bạn có thể bắt đầu lập trình trên server thông qua VS Code rồi đó.</p><p>Một lưu ý nhỏ là khi dùng VS Code trên server thì bạn cần phải cài extension <strong>trên server đó</strong> thì mới có thể dùng được, tức là nếu có extension nào bạn đã cài trên máy rồi thì vẫn phải cài lại trên server.</p><p>Happy coding!</p>]]></content>
    
    
    
    <tags>
      
      <tag>IDE</tag>
      
      <tag>Coding</tag>
      
      <tag>VScode</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Open-closed principle</title>
    <link href="/2020/08/23/Open-closed-principle/"/>
    <url>/2020/08/23/Open-closed-principle/</url>
    
    <content type="html"><![CDATA[<p>Open-closed principle là 1 trong các nguyên tắc của bộ nguyên tắc lập trình SOLID trong lập trình hướng đối tượng. Đây là 1 nguyên tắc rất quan trọng bởi nó giúp cho code của dự án dễ bảo trì và mở rộng, có thể thích ứng với những thay đổi trong môi trường Agile.</p><p>Nguyên văn phát biểu của nguyên tắc này như sau:</p><blockquote><p>“Các thực thể phần mềm (class, function,…) nên tạo điều kiện cho việc mở rộng, nhưng hạn chế cho việc thay đổi.”</p></blockquote><p><escape><a id="more"></a></escape></p><p>Có thể hiểu lợi ích của nguyên tắc này thông qua 1 ví dụ như sau, giả sử như bạn là một lập trình viên đang làm cho 1 công ty IT nọ. Bạn vào đó với vai trò phát triển phần mềm cho 1 dự án của 1 team trong công ty. Thật không may, mã nguồn của dự án đó nhiều đến nỗi bạn không kiểm soát được ảnh hưởng của những thành phần trong hệ thống đối với nhau. Nhưng công ty lại đòi hỏi bạn phải hiện thực 1 tính năng mới cho dự án trong 1 thời gian ngắn. Vậy làm cách nào bạn có thể hoàn thành công việc được giao đúng hạn? Bạn sợ rằng nếu bạn hiện thực tính năng mới theo yêu cầu nghĩa là bạn đang tạo ra 1 sự rủi ro khiển cho hệ thống không còn hoạt động giống như trước. Bạn liên tục đặt câu hỏi rằng liệu tính năng mới được thêm vào có làm phá vỡ những tính năng khác hiện có hay không. Nếu chuyện đó thật sự xảy ra thì nó không hẳn hoàn toàn là lỗi của bạn. Cái quan trọng nhất trong chuyện này là cách mà code của dự án đã được thiết kế như thế nào. Nếu code của dự án tuân theo open-closed principle thì bạn có thể hiện thực tính năng mới bằng cách viết thêm code cho dự án, tạo thêm class kế thừa từ class sẵn có trong dự án mà không cần phải thay đổi code có sẵn. Điều này giúp giảm thiểu rủi ro phá vỡ hệ thống đang hoạt động mà vẫn hoàn thành được tiến độ công việc của bạn. Trong khi đó, nếu dự án được thiết kế đi ngược lại open-closed principle thì bạn có thể phải thay đổi code của dự án. Rõ ràng là điều này tiềm ẩn nhiều rủi ro hơn và cũng khó hiện thực hơn trường hợp đầu tiên.</p><p>Như vậy, ta đã thấy được lợi ích của việc thiết kế code theo open-closed principle rồi. Vậy code như thế nào mới gọi là tuân theo nguyên tắc đó? Ta hãy tiếp tục tìm hiểu thông qua ví dụ Python dưới đây.</p><p>Mình đang làm 1 dự án xây dựng mô hình phân loại spam cho văn bản sử dụng Machine Learning. Để cho dễ hiểu, mình sẽ bỏ qua phần hiện thực của mô hình mà chỉ tập trung vào phần code để sử dụng mô hình mà thôi.</p><p>Giả sử như mình đã xây dựng xong 1 mô hình có input là 1 đoạn văn bản và output ra là 1 số hoặc 0 hoặc 1, 0 nghĩa là không phải spam còn 1 nghĩa là spam. Nhưng trước khi đưa nó vào chạy thực tế, mình cần phải đánh giá mô hình này có hoặc động tốt hay không bằng việc cho nó dự đoán 1 tập nhiều văn bản khác nhau và tính tỷ lệ phần trăm mà nó dự đoán đúng. Vậy mình sẽ hiện thực 1 hàm đánh giá mô hình như sau:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># Đây là hàm dùng để lấy output của mô hình</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">predict</span>(<span class="hljs-params">texts: <span class="hljs-type">List</span>[<span class="hljs-built_in">str</span>]</span>) -&gt; np.array:<br>    <span class="hljs-comment"># Hàm này sẽ dùng mô hình đã được huấn luyện để chạy rồi trả về kết quả của mô hình</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">evaluate_spam_model</span>(<span class="hljs-params">texts: <span class="hljs-type">List</span>[<span class="hljs-built_in">str</span>], truth_labels: np.array</span>) -&gt; <span class="hljs-built_in">float</span>:<br>    predicted_labels = predict(texts)<br>    num_correct_predictions = np.<span class="hljs-built_in">sum</span>(predicted_labels == truth_labels) <span class="hljs-comment"># Tính số lần mà mô hình dự đoán đúng</span><br>    num_total_predictions = <span class="hljs-built_in">len</span>(texts) <span class="hljs-comment"># Tổng số văn bản mà mô hình dự đoán.</span><br>    accuracy = num_correct_predictions / num_total_predictions <span class="hljs-comment"># Tính accuracy của mô hình</span><br>    <span class="hljs-keyword">return</span> accuracy<br></code></pre></td></tr></table></figure><p>Khi chạy hàm này, mình nhận thấy kết quả đánh giá của mô hình không đạt yêu cầu đề ra nên mình quyết định thử dùng 1 phương pháp mới để cải thiện độ chính xác của mô hình. Sau khi hiện thực lại xong, mình nhận thấy hàm <code>predict</code> không thể chạy được mô hình mới vì bạn đã dùng thư viện khác để hiện thực nó. Bạn thay đổi code của mình thành như sau:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">predict</span>(<span class="hljs-params">texts: <span class="hljs-type">List</span>[<span class="hljs-built_in">str</span>], model_name: <span class="hljs-built_in">str</span></span>) -&gt; np.array:<br>    <span class="hljs-keyword">if</span> model_name == <span class="hljs-string">&#x27;v1&#x27;</span>:<br>        <span class="hljs-comment"># Chạy mô hình đầu tiên</span><br>    <span class="hljs-keyword">elif</span> model_name == <span class="hljs-string">&#x27;v2&#x27;</span>:<br>        <span class="hljs-comment"># Chạy mô hình thứ hai</span><br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">raise</span> Exception(<span class="hljs-string">&#x27;No such model.&#x27;</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">evaluate_spam_model</span>(<span class="hljs-params">texts: <span class="hljs-type">List</span>[<span class="hljs-built_in">str</span>], truth_labels: np.array, model_name: <span class="hljs-built_in">str</span></span>) -&gt; <span class="hljs-built_in">float</span>:<br>    predicted_labels = predict(texts, model_name)<br>    num_correct_predictions = np.<span class="hljs-built_in">sum</span>(predicted_labels == truth_labels) <span class="hljs-comment"># Tính số lần mà mô hình dự đoán đúng</span><br>    num_total_predictions = <span class="hljs-built_in">len</span>(texts) <span class="hljs-comment"># Tổng số văn bản mà mô hình dự đoán.</span><br>    accuracy = num_correct_predictions / num_total_predictions <span class="hljs-comment"># Tính accuracy của mô hình</span><br>    <span class="hljs-keyword">return</span> accuracy<br></code></pre></td></tr></table></figure><p>Ở đây ta có 2 vấn đề:</p><ol><li>Việc thêm code vào hàm <code>predict</code> làm tăng rủi ro sinh ra bug cho hàm này. Nếu như mình chỉ có 2 hoặc 3 mô hình thì không thành vấn đề. Nhưng giả sử khi mình có tới hàng chục mô hình khác nhau thì đồng nghĩa với việc hàm này sẽ vô cùng dài và khó đọc. Khi đó thì việc kiểm tra lỗi sẽ trở nên khó khăn hơn.</li><li>Việc thay đổi signature của hàm <code>predict</code> khiến cho những hàm sử dụng nó cũng thay đổi theo. Trong trường hợp này thì chỉ có 1 mình hàm <code>evaluate_spam_model</code> là phải thay đổi. Nhưng nếu như mình có hàm khác sử dụng hàm <code>evaluate_spam_model</code> thì sao? Ví dụ như hàm <code>report_spam_performance</code> sử dụng hàm <code>evaluate_spam_model</code> để chạy ra kết quả và output ra 1 report để mình xem. Như vậy, việc thay đổi signature của 1 hàm có thể dẫn đến việc thay đổi signature của toàn bộ hàm trực tiếp hoặc gián tiếp sử dụng nó.</li></ol><p>Rõ ràng là đoạn code trên không tuân theo open-closed principle. Vậy code tuân theo nguyên tắc này sẽ trông như thế nào? Hãy xem đoạn code dưới đây:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">SpamStrategy</span>(<span class="hljs-title class_ inherited__">ABC</span>): <span class="hljs-comment"># Khai báo class kế thừa Abstract Base Classes. Link: https://docs.python.org/3/library/abc.html#abc.ABC</span><br><span class="hljs-meta">    @abstractmethod</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">predict</span>(<span class="hljs-params">self, texts: <span class="hljs-type">List</span>[<span class="hljs-built_in">str</span>]</span>) -&gt; np.array:<br>        <span class="hljs-keyword">pass</span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">SpamV1Strategy</span>(<span class="hljs-title class_ inherited__">SpamStrategy</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">predict</span>(<span class="hljs-params">self, text: <span class="hljs-type">List</span>[<span class="hljs-built_in">str</span>]</span>) -&gt; np.array:<br>        <span class="hljs-comment"># Chạy mô hình thứ nhất</span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">SpamV2Strategy</span>(<span class="hljs-title class_ inherited__">SpamStrategy</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">predict</span>(<span class="hljs-params">self, text: <span class="hljs-type">List</span>[<span class="hljs-built_in">str</span>]</span>) -&gt; np.array:<br>        <span class="hljs-comment"># Chạy mô hình thứ hai</span><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">evaluate_spam_model</span>(<span class="hljs-params">texts: <span class="hljs-type">List</span>[<span class="hljs-built_in">str</span>], truth_labels: np.array, strategy: SpamStrategy</span>):<br>    predicted_labels = strategy.predict(texts, model_name)<br>    num_correct_predictions = np.<span class="hljs-built_in">sum</span>(predicted_labels == truth_labels) <span class="hljs-comment"># Tính số lần mà mô hình dự đoán đúng</span><br>    num_total_predictions = <span class="hljs-built_in">len</span>(texts) <span class="hljs-comment"># Tổng số văn bản mà mô hình dự đoán.</span><br>    accuracy = num_correct_predictions / num_total_predictions <span class="hljs-comment"># Tính accuracy của mô hình</span><br>    <span class="hljs-keyword">return</span> accuracy<br></code></pre></td></tr></table></figure><p>Ở đây, mình khai báo 1 abstract class <code>SpamStrategy</code> có khai báo 1 hàm abstract là <code>predict</code>. Mỗi lần hiện thực 1 mô hình spam mới thì mình sẽ tạo thêm 1 class mới kế thừa từ class này rồi chạy hàm <code>evaluate_spam_model</code> bằng việc thay đổi tham số strategy. Như vậy, mỗi lần mình hiện thực thêm 1 mô hình mới thì đoạn code của những mô hình cũ (những class kế thừa từ <code>SpamStrategy</code>) không bị thay đổi. Nếu như mình nhận thấy mô hình mới không được tốt như mô hình cũ thì mình vẫn có thể dễ dàng chạy lại mô hình cũ chỉ bằng việc thay đổi tham số của hàm <code>evaluate_spam_model</code> mà thôi!</p><p>Thông qua ví dụ trên, chúng ta thấy được tầm quan trọng của việc thiết kế code theo open-closed principle. Đối với những dự án nhỏ, nguyên tắc này đôi khi là không cần thiết bởi nó khiến cho code trở nên dài dòng hơn. Nhưng khi dự án phình to ra với vô số hàm và class được thêm vào thì ta mới thấy rõ được tầm quan trọng của nguyên tác này.</p>]]></content>
    
    
    
    <tags>
      
      <tag>Python</tag>
      
      <tag>OOP</tag>
      
      <tag>Software Engineering</tag>
      
      <tag>SOLID</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Sự đối lập giữa Object và Data Structure</title>
    <link href="/2020/08/09/su-doi-lap-giua-object-va-data-structure/"/>
    <url>/2020/08/09/su-doi-lap-giua-object-va-data-structure/</url>
    
    <content type="html"><![CDATA[<p>Bài viết này là kiến thức mình học được khi đọc cuốn <em>Clean Code: A Handbook of Agile Software Craftsmanship</em>, mình muốn thông qua bài viết này có thể chia sẻ hiểu biết của mình với mọi người cũng như tự giúp bản thân nắm vững hơn những gì đã đọc được.</p><p>Trong lập trình hướng đối tượng, 2 khái niệm object và data structure có sự đối lập nhau rõ ràng mặc dù nghe thì chúng có vẻ hơi hơi giống nhau. Trong bài viết này, mình sẽ tìm hiểu và phân tích sự đối lập này thông qua 1 ví dụ thực tế.</p><p><escape><a id="more"></a></escape></p><h2 id="Su-khac-nhau-giua-Object-va-Data-Structure"><a href="#Su-khac-nhau-giua-Object-va-Data-Structure" class="headerlink" title="Sự khác nhau giữa Object và Data Structure"></a>Sự khác nhau giữa Object và Data Structure</h2><p>Object đóng gói toàn bộ dữ liệu của nó bên trong 1 class và chỉ cung cấp ra bên ngoài một hoặc nhiều hàm để người dùng gọi. Như vậy, chỉ có các hàm bên trong 1 class mới có thể quản lý dữ liệu của class đó. Ngược lại, data structure để phơi bày dữ liệu của nó và không có bất kỳ hàm nào có ý nghĩa.</p><p>Ta có thể thấy trong đoạn văn trên, object và data structure hoàn toàn đối lập nhau. Một bên thì giấu dữ liệu và phơi bày hàm, còn một bên thì phơi bày dữ liệu và không có hàm (coi như giấu).</p><h2 id="Vi-du"><a href="#Vi-du" class="headerlink" title="Ví dụ"></a>Ví dụ</h2><p>Mình hãy cùng xem xét 1 ví dụ như sau:<br>Dưới đây là 1 đoạn code viết theo hướng data structure. Mỗi shape chỉ đơn giản là 1 tập các thuộc tính riêng biệt của mỗi dạng hình học. Class Geometry có nhiệm vụ tính toán các giá trị chẳng hạn như diện tích dựa trên 3 shape này.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Square</span> &#123;<br>    <span class="hljs-keyword">public</span> Point topLeft;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">double</span> side;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Rectangle</span> &#123;<br>    <span class="hljs-keyword">public</span> Point topLeft;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">double</span> height;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">double</span> width;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Circle</span> &#123;<br>    <span class="hljs-keyword">public</span> Point center;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">double</span> radius;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Geometry</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">double</span> <span class="hljs-title function_">area</span><span class="hljs-params">(Object shape)</span> <span class="hljs-keyword">throws</span> NoSuchShapeException &#123;<br>        <span class="hljs-keyword">if</span> (shape <span class="hljs-keyword">instanceof</span> Square) &#123;<br>            <span class="hljs-type">Square</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> (Square)shape;<br>            <span class="hljs-keyword">return</span> s.side * s.side;<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (shape <span class="hljs-keyword">instanceof</span> Rectangle) &#123;<br>            <span class="hljs-type">Rectangle</span> <span class="hljs-variable">r</span> <span class="hljs-operator">=</span> (Rectangle)shape;<br>            <span class="hljs-keyword">return</span> r.height * r.width;<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (shape <span class="hljs-keyword">instanceof</span> Circle) &#123;<br>            <span class="hljs-type">Circle</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> (Circle)shape;<br>            <span class="hljs-keyword">return</span> Math.PI * c.radius * c.radius;<br>        &#125;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">NoSuchShapeException</span>();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>Còn dưới đây là 1 đoạn code được viết theo hướng OOP, mỗi shape bắt buộc phải thừa kế từ class Shape và tự hiện thực các hàm của Shape.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Square</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Shape</span> &#123;<br>    <span class="hljs-keyword">private</span> Point topLeft;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">double</span> side;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">double</span> <span class="hljs-title function_">area</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> side * side;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Rectangle</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Shape</span> &#123;<br>    <span class="hljs-keyword">private</span> Point topLeft;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">double</span> height;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">double</span> width;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">double</span> <span class="hljs-title function_">area</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> height * width;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Circle</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Shape</span> &#123;<br>    <span class="hljs-keyword">private</span> Point center;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">double</span> radius;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">double</span> <span class="hljs-title function_">area</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> Math.PI * radius * radius;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>Giả sử như chúng ta muốn thêm 1 shape mới vào code (Triangle chẳng hạn), đối với đoạn code đầu tiên (code theo data structure) thì ta cần khai báo thêm 1 data structure mới tên là Triangle và thay đổi toàn bộ hàm có trong class Geometry (trong trường hợp này chỉ có 1 hàm area). Tuy nhiên, trong 1 trường hợp khác, khi ta chỉ muốn thêm 1 hàm mới để tính chu vi của shape, ta chỉ cần khai báo 1 hàm tên là perimeter trong class Geometry và mọi thay đổi chỉ gói gọn trong hàm này mà thôi.<br>Bây giờ mình sẽ dùng đoạn code thứ hai (sử dụng OOP) để áp dụng vào trường hợp trên. Việc thêm 1 shape mới trở nên dễ dàng hơn rất nhiều so với sử dụng data structure, chỉ cần tạo 1 class mới tên là Triangle và hiện thực các hàm cần thiết của class Shape mà không làm ảnh hưởng đến các Shape còn lại. Trong khi đó, nếu thêm hàm perimeter vào class Shape thì đòi hỏi ta phải thay đổi toàn bộ code của mọi class thừa kế từ Shape.</p><p>Như vậy có thể thấy rằng:<br><strong>Đối với lập trình sử dụng data structure, việc thêm 1 hàm mới trở nên dễ dàng mà không cần thay đổi code trong những data structure khác nhưng lại khó để thêm 1 data structure mới vì phải thay đổi toàn bộ hàm có sẵn. Ở chiều ngược lại, lập trình theo hướng đối tượng khiến cho việc thêm 1 class mới dễ dàng mà không cần thay đổi những class khác nhưng lại khó để thêm 1 hàm mới vì toàn bộ class khác phải thay đổi theo.</strong></p>]]></content>
    
    
    
    <tags>
      
      <tag>OOP</tag>
      
      <tag>Software Engineering</tag>
      
      <tag>Data structure</tag>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
